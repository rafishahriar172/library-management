generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          String        @id @default(uuid())
  title       String
  author      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  image       String?
  slNo        String        @unique
  synopsis    String?
  Comment     Comment[]
  Loan        Loan[]
  Reservation Reservation[]
  Category    Category[]
}

model Category {
  id    String  @id @default(uuid())
  genre String
  type  String?
  Book  Book[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  bookId    String
  userId    String
  createdAt DateTime @default(now())
  Book      Book     @relation(fields: [bookId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Loan {
  id         String     @id @default(uuid())
  userId     String
  bookId     String
  loanDate   DateTime
  returnDate DateTime?
  status     LoanStatus
  Book       Book       @relation(fields: [bookId], references: [id])
  User       User       @relation(fields: [userId], references: [id])
}

model Menu {
  id    String @id @default(uuid())
  title String
  link  String
  role  Role
}

model Reservation {
  id         String   @id @default(uuid())
  userId     String
  bookId     String
  reservedAt DateTime @default(now())
  Book       Book     @relation(fields: [bookId], references: [id])
  User       User     @relation(fields: [userId], references: [id])
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  image        String?
  phone        String?
  role         Role
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Comment      Comment[]
  Loan         Loan[]
  Reservation  Reservation[]
  RefreshToken RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

enum LoanStatus {
  BORROWED
  RETURNED
  OVERDUE
}

enum Role {
  ADMIN
  MEMBER
  LIBRARIAN
}
